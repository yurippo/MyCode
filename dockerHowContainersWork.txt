How to view available containers

To list running containers, run the docker ps command. To see all containers in all states, pass the -a argument.

Here is an example.

docker ps -a

Here is the output from that command.

CONTAINER ID    IMAGE        COMMAND         CREATED       STATUS           PORTS        NAMES
d93d40cc1ce9    tmp-ubuntu:latest  "dotnet website.dll …"  6 seconds ago    Up 5 seconds        8080/tcp      happy_wilbur
33a6cf71f7c1    tmp-ubuntu:latest  "dotnet website.dll …"  2 hours ago     Exited (0) 9 seconds ago            adoring_borg


How to run a container

To start a container, run the docker run command. You only need to specify the image to run with its name or ID to launch the container from the image. A container launched in this manner provides an interactive experience.

Here, to run the container with our website in the background, add the -d flag.

docker run -d tmp-ubuntu

How to pause a container

To pause a container, run the docker pause command. Here is an example.

docker pause happy_wilbur

Pausing a container will suspend all processes. This command enables the container to continue processes at a later stage. The docker unpause command un-suspends all processes in the specified containers.

How to restart a container

To restart containers, run the docker restart command. Here is an example.

docker restart happy_wilbur

The container receives a stop command, followed by a start command. If the container doesn't respond to the stop command, then a kill signal is sent.

How to stop a container

To stop a running container, run the docker stop command. Here is an example.

docker stop happy_wilbur

The stop command sends a termination signal to the container and the process running in the container.

How to remove a container

To remove a container, run the docker rm command. Here is an example.

docker rm happy_wilbur

After you remove the container, all data in the container is destroyed. It's essential to always consider containers as temporary when thinking about storing data.

Docker container network configuration
The default Docker network configuration allows for the isolation of containers on the Docker host. This feature enables you to build and configure apps that can communicate securely with each other.

Docker provides three pre-configured network configurations:

Bridge
Host
none
You choose which of these network configurations to apply to your container depending on its network requirements.

What is the bridge network?
The bridge network is the default configuration applied to containers when launched without specifying any additional network configuration. This network is an internal, private network used by the container, and isolates the container network from the Docker host network.

Each container in the bridge network is assigned an IP address and subnet mask with the hostname defaulting to the container name. Containers connected to the default bridge network are allowed to access other bridge connected containers by IP address. The bridge network doesn't allow communication between containers using hostnames.

By default, Docker doesn't publish any container ports. To enable port mapping between the container ports and the Docker host ports, use the Docker port --publish flag.

The publish flag effectively configures a firewall rule that maps the ports.

In this example, your tracking portal is accessible to clients browsing to port 80. You'll have to map port 80 from the container to an available port on the host. You have port 8080 open on the host, which enables you to set the flag like this.

--publish 8080:80

Any client browsing to the Docker host IP and port 8080 can access the tracking portal.

What is the host network?
The host network enables you to run the container on the host network directly. This configuration effectively removes the isolation between the host and the container at a network level.

In this example, let's assume you decide to change the networking configuration to the host network option. Your tracking portal is still accessible using the host IP. You can now use the well known port 80 instead of a mapped port.

Keep in mind that the container can use only ports not already used by the host.

What is the none network?
To disable networking for containers, use the none network option.

Operating system considerations
Keep in mind that there are differences between desktop operating systems for the Docker network configuration options. For example, the Docker0 network interface isn't available on macOS when using the bridge network, and using the host network configuration isn't supported for both Windows and macOS desktops.

These differences might affect the way your developers configure their workflow to manage container development.
