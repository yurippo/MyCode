In this unit, you will continue with the example of a company that makes Linux admin tools. Recall that you plan to use Linux VMs to let potential customers test your software.
You have a resource group ready and now it is time to create the VMs.

Your company has paid for a booth at a big Linux trade show. You plan a demo area containing three terminals each connected to a separate Linux VM.
At the end of each day, you want to delete the VMs and recreate them, so they start fresh every morning. Creating the VMs manually after work when you are tired
would be error prone. 
You want to write a PowerShell script to automate the VM creation process.

Follow these steps in Cloud Shell on the right to write the script:

Switch to your home folder in Cloud Shell.

PowerShell

cd $HOME\clouddrive

Create a new text file, named ConferenceDailyReset.ps1.

PowerShell

touch "./ConferenceDailyReset.ps1"

Open the integrated editor, and select the ConferenceDailyReset.ps1 file.

PowerShell

code "./ConferenceDailyReset.ps1"

 Tip

The integrated Cloud Shell also supports vim, nano, and emacs if you'd prefer to use one of those editors.


Start by capturing the input parameter in a variable. Add the following line to your script.

PowerShell

param([string]$resourceGroup)

Note

Normally, you'd have to authenticate with Azure using your credentials using Connect-AzAccount, and this could be done in the script.
However, in Cloud Shell environment you will already be authenticated, so this is unnecessary.

Prompt for a username and password for the VM's admin account and capture the result in a variable.

PowerShell

$adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."

Create a loop that executes three times.

PowerShell

For ($i = 1; $i -le 3; $i++) 
{

}

In the loop body, create a name for each VM and store it in a variable, and output it to the console.

PowerShell

$vmName = "ConferenceDemo" + $i
Write-Host "Creating VM: " $vmName

Next, create a VM using the $vmName variable.

PowerShell

New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS

Save the file. You can use the "..." menu at the top right corner of the editor. There are also common accelerator keys for Save, like Ctrl-S.

The completed script should look like the following code.

PowerShell

param([string]$resourceGroup)

$adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."

For ($i = 1; $i -le 3; $i++)
{
    $vmName = "ConferenceDemo" + $i
    Write-Host "Creating VM: " $vmName
    New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS
}


Run the script

Save the file, and close the editor using the "..." context menu on the top right of the editor.

Run the script.

PowerShell

./ConferenceDailyReset.ps1 learn-e952f3de-a34c-4a72-bab4-eefed33fffe0

The script will take several minutes to complete. When it's finished, verify that it ran successfully
by looking at the resources you now have in your resource group:

PowerShell

Get-AzResource -ResourceType Microsoft.Compute/virtualMachines

You should see three VMs, each with a unique name.

You wrote a script that automated the creation of three VMs in the resource group indicated by a script parameter.
The script is short and simple but automates a process that would take a long time to complete manually with the Azure portal.


Clean up
The sandbox automatically cleans up your resources when you're finished with this module.

When you're working in your own subscription, it's a good idea at the end of a project to identify whether you still need the resources you created. Resources left running can cost you money. You can delete resources individually or delete the resource group to delete the entire set of resources.

When you are running in your own subscription, you can use the following PowerShell cmdlet to delete the resource group (and all related resources).

PowerShell

Remove-AzResourceGroup -Name MyResourceGroupName

When you are asked to confirm the delete, answer Yes, or you can add the -Force parameter to skip the prompt. The command may take several minutes to complete.












